public class Solution
{
    public long[] solution(int n, int m)
    {
        // 최대공약수 겹치는 약수 중 소수를 곱한 값
        // 12 = 1 2 3 4 6 12
        // 30 = 1 2 3 5 6 10 15 30
        // 12와 30의 최대 공약수는 2 * 3 = 6;

        Divisor(n); // 99 - 1, 3, 9, 11, 33, 99
        Divisor(m); // 90 - 1, 2, 3, 5, 6, 9, 10, 15, 18, 30, 45, 90
                    // 1, 3, 9가 공약수이니 추출하여서 제일 큰 9를 추출하자



        List<int> num = new List<int>();
        long GCDvisor = 0;

        for (int i = 0; i < Divisor(n).Count; i++)
        {
            for (int j = 0; j < Divisor(m).Count; j++)
            {
                if (Divisor(n)[i] == Divisor(m)[j])
                {
                    num.Add(Divisor(n)[i]); // 1, 3, 9 가 추출이 되네 뭐지;
                }
            }
        }

        GCDvisor += num.Max();

        // 최소공배수 둘의 배수 중 겹치는 값중 가장 작은 값
        // 12 = 24 36 48 60 || 2 * 2 * 3
        // 30 = 60          || 2 * 3 * 5
        // 12와 30의 최소공배수는 60;

        // Multiple(n); //  6 - 2 3 1
        // Multiple(m); //  4 - 2 2 1
                     // 2 2 3 1 을 추출해야 하는데... 

        // List<int> num2 = new List<int>();
        long LCMultiple;

        LCMultiple = (n * m) / GCDvisor;

        //if (Multiple(n).Count >= Multiple(m).Count)
        //{
        //    for (int i = 0; i < Multiple(n).Count; i++)
        //    {
        //        num2.Add(Multiple(n)[i]);
        //    }

        //    for (int i = 0; i < Multiple(m).Count; i++)
        //    {
        //        if (Multiple(n).Contains(Multiple(m)[i]) == false)
        //        {
        //            num2.Add(Multiple(m)[i]);
        //        }
        //    }
        //}
        //else
        //{
        //    for (int i = 0; i < Multiple(m).Count; i++)
        //    {
        //        num2.Add(Multiple(m)[i]);
        //    }

        //    for (int i = 0; i < Multiple(n).Count; i++)
        //    {
        //        if (Multiple(m).Contains(Multiple(n)[i]) == false)
        //        {
        //            num2.Add(Multiple(n)[i]);
        //        }
        //    }
        //}

        //for (int i = 0; i < num2.Count; i++)
        //{
        //    LCMultiple *= num2[i];
        //}



        long[] answer = new long[2] { GCDvisor, LCMultiple };
        Console.WriteLine(GCDvisor);
        Console.WriteLine(LCMultiple);

        return answer;
    }
    public List<int> Divisor(int num)
    {
        List<int> listnum = new List<int>();
        List<int> listDiv = new List<int>();
        for (int i = 1; i <= num; i++)
        {
            if (num % i == 0)
            {
                listnum.Add(i);
            }
        }

        //for (int k = 0; k < listnum.Count; k++)
        //{
        //    if (listnum[k] / 1 == 1)
        //    {
        //        listDiv.Add(listnum[k]);
        //    }
        //    else if (listnum[k] / 2 == 1)
        //    {
        //        listDiv.Add(listnum[k]);
        //    }
        //}

        return listnum;
        // return listDiv;
    }

    //public List<int> Multiple(int num)
    //{
    //    List<int> multiple = new List<int>();

    //    while (true)
    //    {
    //        if (num % 2 == 0)
    //        {
    //            num = num / 2;
    //            multiple.Add(2);
    //        }
    //        else if (num % 3 == 0)
    //        {
    //            num = num / 3;
    //            multiple.Add(3);
    //        }
    //        else
    //        {
    //            multiple.Add(num);
    //            break;
    //        }
    //    }
    //    return multiple;
    //}

    //int gcd(int a, int b)
    //{
    //    if (b == 0)
    //    {
    //        return a;
    //    }
    //    else 
    //    {
    //        return gcd(b, a % b); 
    //    }
    //}
}
